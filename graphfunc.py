import plotly.express as px
import pandas as pd
from dash import html
import numpy as np
import dash_bootstrap_components as dbc
def print_tip_distribution(dataFrame, day_filter='All'):
    """
    –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞–µ–≤—ã—Ö –ø–æ –ø–æ–ª—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏

    """
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏
    if day_filter != 'All':
       dataFrame = dataFrame[dataFrame['day'] == day_filter]

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö —á–∞–µ–≤—ã—Ö
    filtered_data = dataFrame.groupby(['sex']).agg({'tip': 'mean'}).reset_index()
    filtered_data['tip'] = filtered_data['tip'].round(2)
    filtered_data.sort_values(by='tip', ascending=False, inplace=True)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    title = (f"Average Tips by Gender ({day_filter})" if day_filter != 'All'
             else "Average Tips by Gender (All Days)")

    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    fig = px.bar(filtered_data,
                 x="sex",
                 y="tip",
                 title=title,
                 color="sex",
                 labels={'sex': 'Gender', 'tip': 'Average Tip ($)'})

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    fig.update_layout(
        xaxis_title="Gender",
        yaxis_title="Average Tip Amount ($)",
        showlegend=False,
        bargap=0.7,
        bargroupgap=0.3,
        margin=dict(l=50, r=50, t=60, b=50),
        autosize=True,
        width=None
    )


    fig.update_traces(width=0.3)

    return fig


def print_total_bill_distribution(dataFrame, day_filter='All'):
    """
    –°–æ–∑–¥–∞–µ—Ç –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É–º–º —Å—á–µ—Ç–æ–≤ (total_bill)
    """
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏
    if day_filter != 'All':
      dataFrame = dataFrame[dataFrame['day'] == day_filter]

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    title = (f"Total Bill Distribution ({day_filter})" if day_filter != 'All'
             else "Total Bill Distribution (All Days)")

    # –°–æ–∑–¥–∞–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
    fig = px.histogram(dataFrame,
                       x="total_bill",
                       title=title,
                       nbins=20,
                       color_discrete_sequence=['indianred'],
                       labels={'total_bill': 'Total Bill Amount ($)'})

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
    fig.update_layout(
        xaxis_title="Total Bill Amount ($)",
        yaxis_title="Count",
        showlegend=False
    )

    return fig


def print_time_boxplot(dataFrame, gender_filter='All'):
    """
    –°–æ–∑–¥–∞–µ—Ç Box plot —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞–µ–≤—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –ø–æ–ª—É

    """
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª—É
    if gender_filter != 'All':
        dataFrame = dataFrame[dataFrame['sex'] == gender_filter]

    title = f"Tip Distribution by Time ({gender_filter})" if gender_filter != 'All' \
        else "Tip Distribution by Time (All Genders)"

    fig = px.box(dataFrame,
                 x='time',
                 y='tip',
                 color='sex' if gender_filter == 'All' else None,
                 title=title,
                 labels={'time': 'Time of Day', 'tip': 'Tip Amount ($)'})

    fig.update_layout(
        legend_title_text='Gender',
        xaxis_title="Time of Day",
        yaxis_title="Tip Amount ($)"
    )

    if gender_filter != 'All':
        fig.update_traces(fillcolor='lightblue', line_color='darkblue')

    return fig


# –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
def print_day_pie_chart(dataFrame):
    day_counts = dataFrame['day'].value_counts().reset_index()
    day_counts.columns = ['day', 'count']

    fig = px.pie(day_counts,
                 values='count',
                 names='day',
                 title='Distribution by Day of Week',
                 color='day',
                 category_orders={'day': ['Thur', 'Fri', 'Sat', 'Sun']})

    fig.update_traces(textposition='inside', textinfo='percent+label')
    return fig

# Scatter plot –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á–∞–µ–≤—ã—Ö –æ—Ç —Å—É–º–º—ã —Å—á–µ—Ç–∞
def print_tip_vs_bill_scatter(dataFrame):
    fig = px.scatter(dataFrame,
                     x='total_bill',
                     y='tip',
                     color='time',
                     title='Tip Amount vs Total Bill',
                     trendline='ewm', trendline_options=dict(span=10),
                     labels={'total_bill': 'Total Bill ($)', 'tip': 'Tip Amount ($)'})

    fig.update_layout(legend_title_text='Time of Day')
    return fig


def calculate_statistics(dataFrame):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –æ —á–∞–µ–≤—ã—Ö
    """
    stats = {}

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    stats['total_records'] = len(dataFrame)
    stats['avg_bill'] = dataFrame['total_bill'].mean()
    stats['avg_tip'] = dataFrame['tip'].mean()
    stats['avg_tip_percentage'] = (dataFrame['tip'] / dataFrame['total_bill'] * 100).mean()
    stats['avg_size'] = dataFrame['size'].mean()

    # –ü–æ –ø–æ–ª—É
    gender_stats = dataFrame.groupby('sex').agg({
        'tip': 'mean',
        'total_bill': 'mean',
        'size': 'mean'
    }).round(2)
    stats['gender_stats'] = gender_stats

    # –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    day_stats = dataFrame.groupby('day').agg({
        'tip': 'mean',
        'total_bill': 'mean',
        'size': 'count'
    }).round(2)
    stats['day_stats'] = day_stats

    # –ü–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
    time_stats = dataFrame.groupby('time').agg({
        'tip': 'mean',
        'total_bill': 'mean'
    }).round(2)
    stats['time_stats'] = time_stats

    # –ü–æ –∫—É—Ä—è—â–∏–º/–Ω–µ–∫—É—Ä—è—â–∏–º
    smoker_stats = dataFrame.groupby('smoker').agg({
        'tip': 'mean',
        'total_bill': 'mean'
    }).round(2)
    stats['smoker_stats'] = smoker_stats

    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
    stats['correlation'] = dataFrame['total_bill'].corr(dataFrame['tip'])

    # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    stats['max_tip'] = dataFrame['tip'].max()
    stats['min_tip'] = dataFrame['tip'].min()
    stats['max_bill'] = dataFrame['total_bill'].max()
    stats['min_bill'] = dataFrame['total_bill'].min()

    return stats


def create_interactive_stats(dataFrame):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    """
    stats = calculate_statistics(dataFrame)

    return html.Div([
        dbc.Row([
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            dbc.Col(dbc.Card([
                dbc.CardHeader("üìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"),
                dbc.CardBody([
                    html.H4(f"{stats['total_records']}", className="text-primary"),
                    html.P("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", className="text-muted")
                ])
            ]), md=3),

            dbc.Col(dbc.Card([
                dbc.CardHeader("üí∞ –°—Ä–µ–¥–Ω–∏–π —Å—á–µ—Ç"),
                dbc.CardBody([
                    html.H4(f"${stats['avg_bill']:.2f}", className="text-success"),
                    html.P("–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞", className="text-muted")
                ])
            ]), md=3),

            dbc.Col(dbc.Card([
                dbc.CardHeader("üíµ –°—Ä–µ–¥–Ω–∏–µ —á–∞–µ–≤—ã–µ"),
                dbc.CardBody([
                    html.H4(f"${stats['avg_tip']:.2f}", className="text-info"),
                    html.P(f"{stats['avg_tip_percentage']:.1f}% –æ—Ç —Å—á–µ—Ç–∞", className="text-muted")
                ])
            ]), md=3),

            dbc.Col(dbc.Card([
                dbc.CardHeader("üë• –†–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏"),
                dbc.CardBody([
                    html.H4(f"{stats['avg_size']:.1f}", className="text-warning"),
                    html.P("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", className="text-muted")
                ])
            ]), md=3),
        ], className="mb-4"),

        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        dbc.Row([
            dbc.Col(dbc.Card([
                dbc.CardHeader("üë®‚Äçüë© –ü–æ –ø–æ–ª—É"),
                dbc.CardBody([
                    *[html.P(f"{row.Index}: ${row.tip:.2f} —á–∞–µ–≤—ã—Ö")
                      for row in stats['gender_stats'].itertuples()]
                ])
            ]), md=4),

            dbc.Col(dbc.Card([
                dbc.CardHeader("üìÖ –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏"),
                dbc.CardBody([
                    *[html.P(f"{row.Index}: ${row.tip:.2f} —á–∞–µ–≤—ã—Ö")
                      for row in stats['day_stats'].itertuples()]
                ])
            ]), md=4),

            dbc.Col(dbc.Card([
                dbc.CardHeader("‚è∞ –ü–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è"),
                dbc.CardBody([
                    *[html.P(f"{row.Index}: ${row.tip:.2f} —á–∞–µ–≤—ã—Ö")
                      for row in stats['time_stats'].itertuples()]
                ])
            ]), md=4),
        ])
    ])